#!/usr/bin/perl -T

use warnings;
use strict;
use File::Find;
use Memoize;
use File::Spec;
use HTML::Template;

BEGIN {
	$blosxom::version="is a proper perl module too much to ask?";
	do "/usr/bin/markdown";
}

$ENV{PATH}="/usr/local/bin:/usr/bin:/bin";
my ($srcdir, $templatedir, $destdir, %links, %oldlinks, %oldpagemtime,
    %renderedfiles, %pagesources);
my $wiki_link_regexp=qr/\[\[([^\s]+)\]\]/;
my $wiki_file_regexp=qr/(^[-A-Za-z0-9_.:\/+]+$)/;
my $wiki_file_prune_regexp=qr!((^|/).svn/|\.\.|^\.|\/\.|\.html?$)!;
my $verbose=0;
my $wikiname="wiki";
my $default_pagetype=".mdwn";
my $cgi=0;
my $url="";
my $cgiurl="";
my $historyurl="";
my $svn=1;
my $anonok=0;

sub usage { #{{{
	die "usage: ikiwiki [options] source templates dest\n";
} #}}}

sub error ($) { #{{{
	if ($cgi) {
		print "Content-type: text/html\n\n";
		print misctemplate("Error", "<p>Error: @_</p>");
		exit 1;
	}
	else {
		die @_;
	}
} #}}}

sub debug ($) { #{{{
	if (! $cgi) {
		print "@_\n" if $verbose;
	}
	else {
		print STDERR "@_\n" if $verbose;
	}
} #}}}

sub mtime ($) { #{{{
	my $page=shift;
	
	return (stat($page))[9];
} #}}}

sub possibly_foolish_untaint ($) { #{{{
	my $tainted=shift;
	my ($untainted)=$tainted=~/(.*)/;
	return $untainted;
} #}}}

sub basename ($) { #{{{
	my $file=shift;

	$file=~s!.*/!!;
	return $file;
} #}}}

sub dirname ($) { #{{{
	my $file=shift;

	$file=~s!/?[^/]+$!!;
	return $file;
} #}}}

sub pagetype ($) { #{{{
	my $page=shift;
	
	if ($page =~ /\.mdwn$/) {
		return ".mdwn";
	}
	else {
		return "unknown";
	}
} #}}}

sub pagename ($) { #{{{
	my $file=shift;

	my $type=pagetype($file);
	my $page=$file;
	$page=~s/\Q$type\E*$// unless $type eq 'unknown';
	return $page;
} #}}}

sub htmlpage ($) { #{{{
	my $page=shift;

	return $page.".html";
} #}}}

sub readfile ($) { #{{{
	my $file=shift;

	local $/=undef;
	open (IN, "$file") || error("failed to read $file: $!");
	my $ret=<IN>;
	close IN;
	return $ret;
} #}}}

sub writefile ($$) { #{{{
	my $file=shift;
	my $content=shift;

	my $dir=dirname($file);
	if (! -d $dir) {
		my $d="";
		foreach my $s (split(m!/+!, $dir)) {
			$d.="$s/";
			if (! -d $d) {
				mkdir($d) || error("failed to create directory $d: $!");
			}
		}
	}
	
	open (OUT, ">$file") || error("failed to write $file: $!");
	print OUT $content;
	close OUT;
} #}}}

sub findlinks ($) { #{{{
	my $content=shift;

	my @links;
	while ($content =~ /$wiki_link_regexp/g) {
		push @links, lc($1);
	}
	return @links;
} #}}}

# Given a page and the text of a link on the page, determine which existing
# page that link best points to. Prefers pages under a subdirectory with
# the same name as the source page, failing that goes down the directory tree
# to the base looking for matching pages.
sub bestlink ($$) { #{{{
	my $page=shift;
	my $link=lc(shift);
	
	my $cwd=$page;
	do {
		my $l=$cwd;
		$l.="/" if length $l;
		$l.=$link;

		if (exists $links{$l}) {
			#debug("for $page, \"$link\", use $l");
			return $l;
		}
	} while $cwd=~s!/?[^/]+$!!;

	#print STDERR "warning: page $page, broken link: $link\n";
	return "";
} #}}}

sub isinlinableimage ($) { #{{{
	my $file=shift;
	
	$file=~/\.(png|gif|jpg|jpeg)$/;
} #}}}

sub htmllink { #{{{
	my $page=shift;
	my $link=shift;
	my $noimagelink=shift;

	my $bestlink=bestlink($page, $link);

	return $link if $page eq $bestlink;
	
	# TODO BUG: %renderedfiles may not have it, if the linked to page
	# was also added and isn't yet rendered! Note that this bug is
	# masked by the bug mentioned below that makes all new files
	# be rendered twice.
	if (! grep { $_ eq $bestlink } values %renderedfiles) {
		$bestlink=htmlpage($bestlink);
	}
	if (! grep { $_ eq $bestlink } values %renderedfiles) {
		return "<a href=\"$cgiurl?do=create&page=$link&from=$page\">?</a>$link"
	}
	
	$bestlink=File::Spec->abs2rel($bestlink, dirname($page));
	
	if (! $noimagelink && isinlinableimage($bestlink)) {
		return "<img src=\"$bestlink\">";
	}
	return "<a href=\"$bestlink\">$link</a>";
} #}}}

sub linkify ($$) { #{{{
	my $content=shift;
	my $file=shift;

	$content =~ s/$wiki_link_regexp/htmllink(pagename($file), $1)/eg;
	
	return $content;
} #}}}

sub htmlize ($$) { #{{{
	my $type=shift;
	my $content=shift;
	
	if ($type eq '.mdwn') {
		return Markdown::Markdown($content);
	}
	else {
		error("htmlization of $type not supported");
	}
} #}}}

sub backlinks ($) { #{{{
	my $page=shift;

	my @links;
	foreach my $p (keys %links) {
		next if bestlink($page, $p) eq $page;
		if (grep { length $_ && bestlink($p, $_) eq $page } @{$links{$p}}) {
			my $href=File::Spec->abs2rel(htmlpage($p), dirname($page));
			
			# Trim common dir prefixes from both pages.
			my $p_trimmed=$p;
			my $page_trimmed=$page;
			my $dir;
			1 while (($dir)=$page_trimmed=~m!^([^/]+/)!) &&
			        defined $dir &&
			        $p_trimmed=~s/^\Q$dir\E// &&
			        $page_trimmed=~s/^\Q$dir\E//;
				       
			push @links, { url => $href, page => $p_trimmed };
		}
	}

	return sort { $a->{page} cmp $b->{page} } @links;
} #}}}
	
sub parentlinks ($) { #{{{
	my $page=shift;
	
	my @ret;
	my $pagelink="";
	my $path="";
	my $skip=1;
	foreach my $dir (reverse split("/", $page)) {
		if (! $skip) {
			unshift @ret, { url => "$path$dir.html", page => $dir };
		}
		else {
			$skip=0;
		}
		$path.="../";
	}
	unshift @ret, { url => $path , page => $wikiname };
	return @ret;
} #}}}

sub indexlink () { #{{{
	return "<a href=\"$url\">$wikiname</a>";
} #}}}
	
sub finalize ($$) { #{{{
	my $content=shift;
	my $page=shift;

	my $title=basename($page);
	$title=~s/_/ /g;
	
	my $template=HTML::Template->new(blind_cache => 1,
		filename => "$templatedir/page.tmpl");
	
	if (length $cgiurl) {
		$template->param(editurl => "$cgiurl?do=edit&page=$page");
		if ($svn) {
			$template->param(recentchangesurl => "$cgiurl?do=recentchanges");
		}
	}

	if (length $historyurl) {
		my $u=$historyurl;
		$u=~s/\[\[\]\]/$pagesources{$page}/g;
		$template->param(historyurl => $u);
	}
	
	$template->param(
		title => $title,
		wikiname => $wikiname,
		parentlinks => [parentlinks($page)],
		content => $content,
		backlinks => [backlinks($page)],
	);
	
	return $template->output;
} #}}}

# Important security check. Make sure to call this before saving any files
# to the source directory.
sub check_overwrite ($$) { #{{{
	my $dest=shift;
	my $src=shift;
	
	if (! exists $renderedfiles{$src} && -e $dest) {
		error("$dest exists and was not rendered from $src before, not overwriting");
	}
} #}}}
		
sub render ($) { #{{{
	my $file=shift;
	
	my $type=pagetype($file);
	my $content=readfile("$srcdir/$file");
	if ($type ne 'unknown') {
		my $page=pagename($file);
		
		$links{$page}=[findlinks($content)];
		
		$content=linkify($content, $file);
		$content=htmlize($type, $content);
		$content=finalize($content, $page);
		
		check_overwrite("$destdir/".htmlpage($page), $page);
		writefile("$destdir/".htmlpage($page), $content);
		$oldpagemtime{$page}=time;
		$renderedfiles{$page}=htmlpage($page);
	}
	else {
		$links{$file}=[];
		check_overwrite("$destdir/$file", $file);
		writefile("$destdir/$file", $content);
		$oldpagemtime{$file}=time;
		$renderedfiles{$file}=$file;
	}
} #}}}

sub loadindex () { #{{{
	open (IN, "$srcdir/.ikiwiki/index") || return;
	while (<IN>) {
		$_=possibly_foolish_untaint($_);
		chomp;
		my ($mtime, $file, $rendered, @links)=split(' ', $_);
		my $page=pagename($file);
		$pagesources{$page}=$file;
		$oldpagemtime{$page}=$mtime;
		$oldlinks{$page}=[@links];
		$links{$page}=[@links];
		$renderedfiles{$page}=$rendered;
	}
	close IN;
} #}}}

sub saveindex () { #{{{
	if (! -d "$srcdir/.ikiwiki") {
		mkdir("$srcdir/.ikiwiki");
	}
	open (OUT, ">$srcdir/.ikiwiki/index") || error("cannot write to index: $!");
	foreach my $page (keys %oldpagemtime) {
		print OUT "$oldpagemtime{$page} $pagesources{$page} $renderedfiles{$page} ".
	        	join(" ", @{$links{$page}})."\n"
				if $oldpagemtime{$page};
	}
	close OUT;
} #}}}

sub rcs_update () { #{{{
	if (-d "$srcdir/.svn") {
		if (system("svn", "update", "--quiet", $srcdir) != 0) {
			warn("svn update failed\n");
		}
	}
} #}}}

sub rcs_commit ($) { #{{{
	my $message=shift;

	if (-d "$srcdir/.svn") {
		if (system("svn", "commit", "--quiet", "-m",
		           possibly_foolish_untaint($message), $srcdir) != 0) {
			warn("svn commit failed\n");
		}
	}
} #}}}

sub rcs_add ($) { #{{{
	my $file=shift;

	if (-d "$srcdir/.svn") {
		my $parent=dirname($file);
		while (! -d "$srcdir/$parent/.svn") {
			$file=$parent;
			$parent=dirname($file);
		}
		
		if (system("svn", "add", "--quiet", "$srcdir/$file") != 0) {
			warn("svn add failed\n");
		}
	}
} #}}}

sub rcs_recentchanges ($) { #{{{
	my $num=shift;
	my @ret;
	
	eval q{use Date::Parse};
	eval q{use Time::Duration};
	
	if (-d "$srcdir/.svn") {
		my $info=`LANG=C svn info $srcdir`;
		my ($svn_url)=$info=~/^URL: (.*)$/m;

		# FIXME: currently assumes that the wiki is somewhere
		# under trunk in svn, doesn't support other layouts.
		my ($svn_base)=$svn_url=~m!(/trunk(?:/.*)?)$!;
		
		my $div=qr/^--------------------+$/;
		my $infoline=qr/^r(\d+)\s+\|\s+([^\s]+)\s+\|\s+(\d+-\d+-\d+\s+\d+:\d+:\d+\s+[-+]?\d+).*/;
		my $state='start';
		my ($rev, $user, $when, @pages, @message);
		foreach (`LANG=C svn log -v '$svn_url'`) {
			chomp;
			if ($state eq 'start' && /$div/) {
				$state='header';
			}
			elsif ($state eq 'header' && /$infoline/) {
				$rev=$1;
				$user=$2;
				$when=concise(ago(time - str2time($3)));
		    	}
			elsif ($state eq 'header' && /^\s+[A-Z]\s+\Q$svn_base\E\/(.+)$/) {
				push @pages, { link => htmllink("", pagename($1), 1) }
					if length $1;
			}
			elsif ($state eq 'header' && /^$/) {
				$state='body';
			}
			elsif ($state eq 'body' && /$div/) {
				my $committype="web";
				if (defined $message[0] &&
				    $message[0]->{line}=~/^web commit by (\w+):?(.*)/) {
					$user="$1";
					$message[0]->{line}=$2;
				}
				else {
					$committype="svn";
				}
				
				push @ret, { rev => $rev,
					user => htmllink("", $user, 1),
					committype => $committype,
					when => $when, message => [@message],
					pages => [@pages] } if @pages;
				return @ret if @ret >= $num;
				
				$state='header';
				$rev=$user=$when=undef;
				@pages=@message=();
			}
			elsif ($state eq 'body') {
				push @message, {line => $_},
			}
		}
	}

	return @ret;
} #}}}

sub prune ($) { #{{{
	my $file=shift;

	unlink($file);
	my $dir=dirname($file);
	while (rmdir($dir)) {
		$dir=dirname($dir);
	}
} #}}}

sub refresh () { #{{{
	# Find existing pages.
	my %exists;
	my @files;
	find({
		no_chdir => 1,
		wanted => sub {
			if (/$wiki_file_prune_regexp/) {
				$File::Find::prune=1;
			}
			elsif (! -d $_) {
				my ($f)=/$wiki_file_regexp/; # untaint
				if (! defined $f) {
					warn("skipping bad filename $_\n");
				}
				else {
					$f=~s/^\Q$srcdir\E\/?//;
					push @files, $f;
					$exists{pagename($f)}=1;
				}
			}
		},
	}, $srcdir);

	my %rendered;

	# check for added or removed pages
	my @add;
	foreach my $file (@files) {
		my $page=pagename($file);
		if (! $oldpagemtime{$page}) {
			debug("new page $page");
			push @add, $file;
			$links{$page}=[];
			$pagesources{$page}=$file;
		}
	}
	my @del;
	foreach my $page (keys %oldpagemtime) {
		if (! $exists{$page}) {
			debug("removing old page $page");
			push @del, $renderedfiles{$page};
			prune($destdir."/".$renderedfiles{$page});
			delete $renderedfiles{$page};
			$oldpagemtime{$page}=0;
			delete $pagesources{$page};
		}
	}
	
	# render any updated files
	foreach my $file (@files) {
		my $page=pagename($file);
		
		if (! exists $oldpagemtime{$page} ||
		    mtime("$srcdir/$file") > $oldpagemtime{$page}) {
		    	debug("rendering changed file $file");
			render($file);
			$rendered{$file}=1;
		}
	}
	
	# if any files were added or removed, check to see if each page
	# needs an update due to linking to them
	# TODO: inefficient; pages may get rendered above and again here;
	# problem is the bestlink may have changed and we won't know until
	# now
	if (@add || @del) {
FILE:		foreach my $file (@files) {
			my $page=pagename($file);
			foreach my $f (@add, @del) {
				my $p=pagename($f);
				foreach my $link (@{$links{$page}}) {
					if (bestlink($page, $link) eq $p) {
		   				debug("rendering $file, which links to $p");
						render($file);
						$rendered{$file}=1;
						next FILE;
					}
				}
			}
		}
	}

	# handle backlinks; if a page has added/removed links, update the
	# pages it links to
	# TODO: inefficient; pages may get rendered above and again here;
	# problem is the backlinks could be wrong in the first pass render
	# above
	if (%rendered) {
		my %linkchanged;
		foreach my $file (keys %rendered, @del) {
			my $page=pagename($file);
			if (exists $links{$page}) {
				foreach my $link (@{$links{$page}}) {
					$link=bestlink($page, $link);
					if (length $link &&
					    ! exists $oldlinks{$page} ||
					    ! grep { $_ eq $link } @{$oldlinks{$page}}) {
						$linkchanged{$link}=1;
					}
				}
			}
			if (exists $oldlinks{$page}) {
				foreach my $link (@{$oldlinks{$page}}) {
					$link=bestlink($page, $link);
					if (length $link &&
					    ! exists $links{$page} ||
					    ! grep { $_ eq $link } @{$links{$page}}) {
						$linkchanged{$link}=1;
					}
				}
			}
		}
		foreach my $link (keys %linkchanged) {
		    	my $linkfile=$pagesources{$link};
			if (defined $linkfile) {
				debug("rendering $linkfile, to update its backlinks");
				render($linkfile);
			}
		}
	}
} #}}}

# Generates a C wrapper program for running ikiwiki in a specific way.
# The wrapper may be safely made suid.
sub gen_wrapper ($$) { #{{{
	my ($svn, $rebuild)=@_;

	eval q{use Cwd 'abs_path'};
	$srcdir=abs_path($srcdir);
	$destdir=abs_path($destdir);
	my $this=abs_path($0);
	if (! -x $this) {
		error("$this doesn't seem to be executable");
	}

	my @params=($srcdir, $templatedir, $destdir, "--wikiname=$wikiname");
	push @params, "--verbose" if $verbose;
	push @params, "--rebuild" if $rebuild;
	push @params, "--nosvn" if !$svn;
	push @params, "--cgi" if $cgi;
	push @params, "--url=$url" if $url;
	push @params, "--cgiurl=$cgiurl" if $cgiurl;
	push @params, "--historyurl=$historyurl" if $historyurl;
	push @params, "--anonok" if $anonok;
	my $params=join(" ", @params);
	my $call='';
	foreach my $p ($this, $this, @params) {
		$call.=qq{"$p", };
	}
	$call.="NULL";
	
	my @envsave;
	push @envsave, qw{REMOTE_ADDR QUERY_STRING REQUEST_METHOD REQUEST_URI
	               CONTENT_TYPE CONTENT_LENGTH GATEWAY_INTERFACE
		       HTTP_COOKIE} if $cgi;
	my $envsave="";
	foreach my $var (@envsave) {
		$envsave.=<<"EOF"
	if ((s=getenv("$var")))
		asprintf(&newenviron[i++], "%s=%s", "$var", s);
EOF
	}
	
	open(OUT, ">ikiwiki-wrap.c") || error("failed to write ikiwiki-wrap.c: $!");;
	print OUT <<"EOF";
/* A wrapper for ikiwiki, can be safely made suid. */
#define _GNU_SOURCE
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

extern char **environ;

int main (int argc, char **argv) {
	/* Sanitize environment. */
	char *s;
	char *newenviron[$#envsave+3];
	int i=0;
$envsave
	newenviron[i++]="HOME=$ENV{HOME}";
	newenviron[i]=NULL;
	environ=newenviron;

	if (argc == 2 && strcmp(argv[1], "--params") == 0) {
		printf("$params\\n");
		exit(0);
	}
	
	execl($call);
	perror("failed to run $this");
	exit(1);
}
EOF
	close OUT;
	if (system("gcc", "ikiwiki-wrap.c", "-o", "ikiwiki-wrap") != 0) {
		error("failed to compile ikiwiki-wrap.c");
	}
	unlink("ikiwiki-wrap.c");
	print "successfully generated ikiwiki-wrap\n";
	exit 0;
} #}}}
		
sub misctemplate ($$) { #{{{
	my $title=shift;
	my $pagebody=shift;
	
	my $template=HTML::Template->new(
		filename => "$templatedir/misc.tmpl"
	);
	$template->param(
		title => $title,
		indexlink => indexlink(),
		wikiname => $wikiname,
		pagebody => $pagebody,
	);
	return $template->output;
}#}}}

sub cgi_recentchanges ($) { #{{{
	my $q=shift;
	
	my $template=HTML::Template->new(
		filename => "$templatedir/recentchanges.tmpl"
	);
	$template->param(
		title => "RecentChanges",
		indexlink => indexlink(),
		wikiname => $wikiname,
		changelog => [rcs_recentchanges(100)],
	);
	print $q->header, $template->output;
} #}}}

sub userinfo_get ($$) { #{{{
	my $user=shift;
	my $field=shift;

	eval q{use Storable};
	my $userdata=eval{ Storable::lock_retrieve("$srcdir/.ikiwiki/userdb") };
	if (! defined $userdata || ! ref $userdata || 
	    ! exists $userdata->{$user} || ! ref $userdata->{$user}) {
		return "";
	}
	return $userdata->{$user}->{$field};
} #}}}

sub userinfo_set ($$) { #{{{
	my $user=shift;
	my $info=shift;
	
	eval q{use Storable};
	my $userdata=eval{ Storable::lock_retrieve("$srcdir/.ikiwiki/userdb") };
	if (! defined $userdata || ! ref $userdata) {
		$userdata={};
	}
	$userdata->{$user}=$info;
	my $oldmask=umask(077);
	my $ret=Storable::lock_store($userdata, "$srcdir/.ikiwiki/userdb");
	umask($oldmask);
	return $ret;
} #}}}

sub cgi_signin ($$) { #{{{
	my $q=shift;
	my $session=shift;

	eval q{use CGI::FormBuilder};
	my $form = CGI::FormBuilder->new(
		title => "$wikiname signin",
		fields => [qw(do page name password confirm_password email)],
		header => 1,
		method => 'POST',
		validate => {
			confirm_password => {
				perl => q{eq $form->field("password")},
			},
			email => 'EMAIL',
		},
		required => 'NONE',
		javascript => 0,
		params => $q,
		action => $q->request_uri,
		header => 0,
		template => (-e "$templatedir/signin.tmpl" ? "$templatedir/signin.tmpl" : "")
	);
	
	$form->field(name => "name", required => 0);
	$form->field(name => "do", type => "hidden");
	$form->field(name => "page", type => "hidden");
	$form->field(name => "password", type => "password", required => 0);
	$form->field(name => "confirm_password", type => "password", required => 0);
	$form->field(name => "email", required => 0);
	if ($q->param("do") ne "signin") {
		$form->text("You need to log in before you can edit pages.");
	}
	
	if ($form->submitted) {
		# Set required fields based on how form was submitted.
		my %required=(
			"Login" => [qw(name password)],
			"Register" => [qw(name password confirm_password email)],
			"Mail Password" => [qw(name)],
		);
		foreach my $opt (@{$required{$form->submitted}}) {
			$form->field(name => $opt, required => 1);
		}
	
		# Validate password differently depending on how
		# form was submitted.
		if ($form->submitted eq 'Login') {
			$form->field(
				name => "password",
				validate => sub {
					length $form->field("name") &&
					shift eq userinfo_get($form->field("name"), 'password');
				},
			);
			$form->field(name => "name", validate => '/^\w+$/');
		}
		else {
			$form->field(name => "password", validate => 'VALUE');
		}
		# And make sure the entered name exists when logging
		# in or sending email, and does not when registering.
		if ($form->submitted eq 'Register') {
			$form->field(
				name => "name",
				validate => sub {
					my $name=shift;
					length $name &&
					! userinfo_get($name, "regdate");
				},
			);
		}
		else {
			$form->field(
				name => "name",
				validate => sub {
					my $name=shift;
					length $name &&
					userinfo_get($name, "regdate");
				},
			);
		}
	}
	else {
		# First time settings.
		$form->field(name => "name", comment => "use FirstnameLastName");
		$form->field(name => "confirm_password", comment => "(only needed");
		$form->field(name => "email",            comment => "for registration)");
		if ($session->param("name")) {
			$form->field(name => "name", value => $session->param("name"));
		}
	}

	if ($form->submitted && $form->validate) {
		if ($form->submitted eq 'Login') {
			$session->param("name", $form->field("name"));
			if (defined $form->field("do") && 
			    $form->field("do") ne 'signin') {
				print $q->redirect(
					"$cgiurl?do=".$form->field("do").
					"&page=".$form->field("page"));
			}
			else {
				print $q->redirect($url);
			}
		}
		elsif ($form->submitted eq 'Register') {
			my $user_name=$form->field('name');
			if (userinfo_set($user_name, {
				           'email' => $form->field('email'),
				           'password' => $form->field('password'),
				           'regdate' => time
				         })) {
				$form->field(name => "confirm_password", type => "hidden");
				$form->field(name => "email", type => "hidden");
				$form->text("Registration successful. Now you can Login.");
				print $session->header();
				print misctemplate($form->title, $form->render(submit => ["Login"]));
			}
			else {
				error("Error saving registration.");
			}
		}
		elsif ($form->submitted eq 'Mail Password') {
			my $user_name=$form->field("name");
			my $template=HTML::Template->new(
				filename => "$templatedir/passwordmail.tmpl"
			);
			$template->param(
				user_name => $user_name,
				user_password => userinfo_get($user_name, "password"),
				wikiurl => $url,
				wikiname => $wikiname,
				REMOTE_ADDR => $ENV{REMOTE_ADDR},
			);
			
			eval q{use Mail::Sendmail};
			my ($fromhost) = $cgiurl =~ m!/([^/]+)!;
			print STDERR "$< $> >>> $cgiurl ".(getpwuid($>))[0]."@".$fromhost."\n";
			sendmail(
				To => userinfo_get($user_name, "email"),
				From => "$wikiname admin <".(getpwuid($>))[0]."@".$fromhost.">",
				Subject => "$wikiname information",
				Message => $template->output,
			) or error("Failed to send mail");
			
			$form->text("Your password has been emailed to you.");
			$form->field(name => "name", required => 0);
			print $session->header();
			print misctemplate($form->title, $form->render(submit => ["Login", "Register", "Mail Password"]));
		}
	}
	else {
		print $session->header();
		print misctemplate($form->title, $form->render(submit => ["Login", "Register", "Mail Password"]));
	}
} #}}}

sub cgi_editpage ($$) { #{{{
	my $q=shift;
	my $session=shift;

	eval q{use CGI::FormBuilder};
	my $form = CGI::FormBuilder->new(
		fields => [qw(do from page content comments)],
		header => 1,
		method => 'POST',
		validate => {
			content => '/.+/',
		},
		required => [qw{content}],
		javascript => 0,
		params => $q,
		action => $q->request_uri,
		table => 0,
		template => "$templatedir/editpage.tmpl"
	);
	
	my ($page)=$form->param('page')=~/$wiki_file_regexp/;
	if (! defined $page || ! length $page || $page ne $q->param('page') ||
	    $page=~/$wiki_file_prune_regexp/ || $page=~/^\//) {
		error("bad page name");
	}
	$page=lc($page);

	$form->field(name => "do", type => 'hidden');
	$form->field(name => "from", type => 'hidden');
	$form->field(name => "page", value => "$page", force => 1);
	$form->field(name => "comments", type => "text", size => 80);
	$form->field(name => "content", type => "textarea", rows => 20,
		cols => 80);
	
	if ($form->submitted eq "Cancel") {
		print $q->redirect("$url/".htmlpage($page));
		return;
	}
	if (! $form->submitted || ! $form->validate) {
		if ($form->field("do") eq "create") {
			if (exists $pagesources{lc($page)}) {
				# hmm, someone else made the page in the
				# meantime?
				print $q->redirect("$url/".htmlpage($page));
				return;
			}
			
			my @page_locs;
			my ($from)=$form->param('from')=~/$wiki_file_regexp/;
			if (! defined $from || ! length $from ||
			    $from ne $form->param('from') ||
			    $from=~/$wiki_file_prune_regexp/ || $from=~/^\//) {
				@page_locs=$page;
			}
			else {
				my $dir=$from."/";
				$dir=~s![^/]+/$!!;
				push @page_locs, $dir.$page;
				push @page_locs, "$from/$page";
				while (length $dir) {
					$dir=~s![^/]+/$!!;
					push @page_locs, $dir.$page;
				}
			}

			$form->tmpl_param("page_select", 1);
			$form->field(name => "page", type => 'select',
				options => \@page_locs);
			$form->title("creating $page");
		}
		elsif ($form->field("do") eq "edit") {
			my $content="";
			if (exists $pagesources{lc($page)}) {
				$content=readfile("$srcdir/$pagesources{lc($page)}");
				$content=~s/\n/\r\n/g;
			}
			$form->tmpl_param("page_select", 0);
			$form->field(name => "content", value => $content,
				force => 1);
			$form->field(name => "page", type => 'hidden');
			$form->title("editing $page");
		}
		
		$form->tmpl_param("can_commit", $svn);
		$form->tmpl_param("indexlink", indexlink());
		print $form->render(submit => ["Save Page", "Cancel"]);
	}
	else {
		# save page
		my $file=$page.$default_pagetype;
		my $newfile=1;
		if (exists $pagesources{lc($page)}) {
			$file=$pagesources{lc($page)};
			$newfile=0;
		}
		
		my $content=$form->field('content');
		$content=~s/\r\n/\n/g;
		$content=~s/\r/\n/g;
		writefile("$srcdir/$file", $content);
		
		my $message="web commit ";
		if ($session->param("name")) {
			$message.="by ".$session->param("name");
		}
		else {
			$message.="from $ENV{REMOTE_ADDR}";
		}
		if (defined $form->field('comments') &&
		    length $form->field('comments')) {
			$message.=": ".$form->field('comments');
		}
		
		if ($svn) {
			if ($newfile) {
				rcs_add($file);
			}
			# presumably the commit will trigger an update
			# of the wiki
			rcs_commit($message);
		}
		else {
			refresh();
		}
		
		print $q->redirect("$url/".htmlpage($page));
	}
} #}}}

sub cgi () { #{{{
	eval q{use CGI};
	eval q{use CGI::Session};
	
	my $q=CGI->new;
	
	my $do=$q->param('do');
	if (! defined $do || ! length $do) {
		error("\"do\" parameter missing");
	}
	
	# This does not need a session.
	if ($do eq 'recentchanges') {
		cgi_recentchanges($q);
		return;
	}
	
	CGI::Session->name("ikiwiki_session");

	my $oldmask=umask(077);
	my $session = CGI::Session->new("driver:db_file", $q,
		{ FileName => "$srcdir/.ikiwiki/sessions.db" });
	umask($oldmask);
	
	# Everything below this point needs the user to be signed in.
	if ((! $anonok && ! defined $session->param("name") ||
		! userinfo_get($session->param("name"), "regdate")) || $do eq 'signin') {
		cgi_signin($q, $session);
	
		# Force session flush with safe umask.
		my $oldmask=umask(077);
		$session->flush;
		umask($oldmask);
		
		return;
	}
	
	if ($do eq 'create' || $do eq 'edit') {
		cgi_editpage($q, $session);
	}
	else {
		error("unknown do parameter");
	}
} #}}}

# main {{{
my $rebuild=0;
my $wrapper=0;
if (grep /^-/, @ARGV) {
	eval {use Getopt::Long};
	GetOptions(
		"wikiname=s" => \$wikiname,
		"verbose|v" => \$verbose,
		"rebuild" => \$rebuild,
		"wrapper" => \$wrapper,
		"svn!" => \$svn,
		"anonok!" => \$anonok,
		"cgi" => \$cgi,
		"url=s" => \$url,
		"cgiurl=s" => \$cgiurl,
		"historyurl=s" => \$historyurl,
	) || usage();
}
usage() unless @ARGV == 3;
($srcdir) = possibly_foolish_untaint(shift);
($templatedir) = possibly_foolish_untaint(shift);
($destdir) = possibly_foolish_untaint(shift);

if ($cgi && ! length $url) {
	error("Must specify url to wiki with --url when using --cgi");
}

gen_wrapper($svn, $rebuild) if $wrapper;
memoize('pagename');
memoize('bestlink');
loadindex() unless $rebuild;
if ($cgi) {
	cgi();
}
else {
	rcs_update() if $svn;
	refresh();
	saveindex();
}
#}}}
