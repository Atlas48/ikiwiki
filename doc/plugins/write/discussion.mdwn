Maybe this is obvious, but the config variable lives in the IkiWiki module, and one probably 
wants to call defaultconfig for most applications. 
<pre>
%IkiWiki::config=IkiWiki::defaultconfig();
IkiWiki::Setup::load($config_file);
print  join(",",keys %IkiWiki::config);
</pre>

[[DavidBremner]]

I'm a little concerned about one aspect of the `%wikistate` variable that was just introduced.
I think global state for each plugin is a fine idea, but I worry about making it persist across
rebuilds.  (And by rebuild, I assume we're talking about the `--rebuild` option.)

My reasoning is that a 'rebuild' should be similar to checking out a new copy of the wiki
and building.  Another way of saying this is that all permanent state should be in the RCS.
It is great that there is temporary state stored in other places - I think of it as indexing
and caching.  I'm worried that with the persistence, plugin writers will start putting data
there that isn't backed by the RCS and that will break IkiWiki's great abilities as a
distributed wiki.

[[Will]]

> Well, if you look at state that already persists across rebuilds, we have
> pagectime, which can be extracted from RCS only very slowly in many
> cases. There's also the separate state stored by the aggregate plugin,
> which is indeed independant of the RCS, and can in some cases not be
> replecated by rebuilding a different checkout (if the data is gone from
> the feeds). Then there's the session cookie database, and the user
> database, which started out with a lot of local state, has been
> whittled down by removing admin prefs and subscriptions, but still has
> important state including password hashes.
> 
> So while I take your point about the potential for abuse,
> there's certianly legitimate reasons to need to store data across
> rebuilds. And plugins have always been able to drop their own files in
> wikistatedir as aggregate does and have it persist, so the abuse
> potential has always been there, the barrier has been lowered only
> slightly.
>
> OTOH, if something can be added to the documentation that encourages
> good behavior, that'd be a good thing ... --[[Joey]]

---

Since there's no mailing list, I'll post my request for help here :-)

I would like to use ikiwiki to build a static site which needs some transformations to be made on binary assets. A simple example is to translate a .odp presentation to .pdf using (e.g.) unoconv. If I add a new .odp attachment, or push one into the repo, I want the corresponding .pdf to appear in the generated site. What's the right place to hook in to do this?

I've made an experimental prototype which hooks into needsbuild, builds the pages then and there, and at the same time removes them from the list of pages to be built.

~~~
sub needsbuild {
    my $files=shift;
    my $nfiles=[];
    foreach my $f (@$files) {
        if ($f =~ /\.odp$/) {
            my $g = $f;
            $g =~ s/\.odp$/\.pdf/;
            debug("building $f to $g");
            will_render($f, $g);
            if (system("unoconv","-f","pdf","-o",IkiWiki::dirname("$config{destdir}/$g"),srcfile($f)) != 0) {
                error("unoconv: failed to translate $f to $g");
            }
        }
        else {
            push @$nfiles, $f;
        }
    };
    return $nfiles;
}
~~~

It appears to work, but is this the right way to do it, bearing in mind ikiwiki's dependency tracking and the like? And is the usage of will_render() correct?

[[BrianCandler]]

---

I would find this page clearer split up into sub-pages. Does anyone agree/disagree? -- [[users/Jon]]
