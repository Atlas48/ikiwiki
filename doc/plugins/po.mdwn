[[!template id=plugin name=po core=0 author="[[intrigeri]]"]]
[[!tag type/format]]

This plugin adds support for multi-lingual wikis, translated with
gettext, using [po4a](http://po4a.alioth.debian.org/).

It depends on the Perl `Locale::Po4a::Po` library (`apt-get install po4a`).

Introduction
============

A language is chosen as the "master" one, and any other supported
language is a "slave" one.

A page written in the "master" language is a "master" page, and is
written in any supported format but PO. It does not have to be named
a special way: migration from/to this plugin does not imply heavy
renaming work.

Example: `bla/page.mdwn` is a "master" Markdown page written in
English; if `usedirs` is enabled, it is rendered as
`bla/page/index.en.html`, else as `bla/page.en.html`.

Any translation of a "master" page into a "slave" language is called
a "slave" page; it is written in the gettext PO format. PO is now
a page type supported by ikiwiki.

Example: `bla/page.fr.po` is the PO "message catalog" used to
translate `bla/page.mdwn` into French; if `usedirs` is enabled, it is
rendered as `bla/page/index.fr.html`, else as `bla/page.fr.html`


Configuration
=============

`po_master_language` is used to set the master language in
`ikiwiki.setup`, such as:

        po_master_language => { 'code' => 'en', 'name' => 'English' }

`po_slave_languages` is used to set the list of supported "slave"
languages, such as:

        po_slave_languages => { 'fr' => 'FranÃ§ais',
                                'es' => 'Castellano',
                                'de' => 'Deutsch',
        }

Decide which pages are translatable
-----------------------------------

The `po_translatable_pages` setting configures what pages are
translatable. It is a [[ikiwiki/PageSpec]], so you have lots of
control over what kind of pages are translatable.

The `*.LL.po` translations files are anyway not considered as being
translatable, so you don't need to worry about excluding them manually
from this [[ikiwiki/PageSpec]].

Internal links
--------------

One can use the `po_link_to_` option in `ikiwiki.setup` to choose how
internal links should be generated, depending on web server features
and site-specific preferences.

### Default linking behavior

If `po_link_to` is unset, or set to `default`, ikiwiki's default
linking behavior is preserved: `\[[page]]` links to the master
language's page.

### Link to negotiated language

If `po_link_to` is set to `negotiated`, `\[[page]]` links to the
negotiated preferred language, *i.e.* `foo/page/`.

(In)compatibility notes:

- `po_link_to => negotiated` provides no useful behavior if `usedirs`
  is disabled; this option combination is neither implemented nor
  allowed
- `po_link_to => negotiated` provides no useful behavior if the web
  server does not support Content Negotiation

### Link to current language

If `po_link_to` is set to `current` and the destination page is either
a translatable page or a translation, `\[[page]]` links to the current
page's language, *i.e.*:

- `foo/page/index.LL.html` if `usedirs` is enabled
- `foo/page.LL.html` if `usedirs` is disabled


Templates
---------

The `OTHERLANGUAGES` loop provides ways to display the existing
translations and/or master page. One typically adds the following code
to `templates/page.tmpl`:

	<TMPL_IF NAME="OTHERLANGUAGES">
	<div id="otherlanguages">
	  <ul>
	  <TMPL_LOOP NAME="OTHERLANGUAGES">
	    <li>
	      <a href="<TMPL_VAR NAME="URL">"
	         class="is_master_<TMPL_VAR NAME="MASTER">">
	      <TMPL_VAR NAME="LANGUAGE">
	    </a>
	    </li>
	  </TMPL_LOOP>
	  </ul>
	</div>
	</TMPL_IF>


Server support
==============

Apache
------

Using `mod_negotiation` makes it really easy to have Apache serve the
page in the client's preferred language, if available. This is the
default Debian Apache configuration.

When `usedirs` is enabled, one has to set `DirectoryIndex index` for
the wiki context.

Setting `DefaultLanguage LL` (replace `LL` with your default MIME
language) for the wiki context can be needed, to ensure
`bla/page/index.en.html` is served as `Content-Language: LL`.
**FIXME**: is it still needed with the new `.en.html` naming convention?

lighttpd
--------

lighttpd unfortunately does not support content negotiation.

**FIXME**: does `mod_magnet` provide the functionality needed to
 emulate this?


TODO
====

Link relationships
------------------

Should pages using the `OTHERLANGUAGES` template loop be declared as
linking to the same page in other versions?

View translation status
-----------------------

One should be able to view some information about the translation
completeness, either for a given page or for the whole wiki.

This should not be too hard using gettext tools. If this is
implemented as a
[HTML::Template](http://search.cpan.org/search?mode=dist&query=HTML%3A%3ATemplate)
loop, a page using it should depend on any "master" and "slave" pages
whose status is being displayed.

If it's not too heavy to compute, this status data may be made
available in the `OTHERLANGUAGES` template loop; else, a dedicated
loop would be needed.

Automatic PO files update
-------------------------

Committing changes to a "master" page must:

1. update the POT file and the PO files for the supported languages;
   this is done in the `needsbuild` hook; the updated PO files must
   then be put under version control

2. trigger a refresh of the corresponding HTML slave pages; this can
   be implemented by making any "slave" page depend on the
   corresponding "master" page. The `add_depends` function can achieve
   this, if used in a **FIXME** hook.

UI consistency: rename "Edit" button on slave pages
---------------------------------------------------

It may be surprising to some, after having pressed *Edit* on a wiki
page, to end up editing a strange looking PO file. The *Edit* button
displayed on "slave" pages must therefore be renamed *Improve
translation* .

Pages selection depending on language
-------------------------------------

To improve user navigation in a multi-lingual wiki, site developers
must be enabled to write:

        \[[!map pages="dev/* and lang(LL)" feeds="no"]]

        \[[!map pages="dev/* and currentlang()" feeds="no"]]

Translation quality assurance
-----------------------------

Modifying a PO file via the CGI must only be allowed if the new
version is a valid PO file. As a bonus, check that it provides a more
complete translation than the existing one.

A new `cansave` type of hook would be needed to implement this.

Note: committing to the underlying repository is a way to bypass
this check.

Translating online
------------------

As PO is a wiki page type, we already have an online PO editor, that
is ikiwiki's CGI.

A message-by-message interface could also be implemented at some
point; a nice way to do offline translation work (without VCS access)
still has to be offered, though.

Translating offline without VCS access
--------------------------------------

The following workflow should be made possible for translators without
VCS access who need to edit the PO files in another editor than a web
browser:

- download the page's PO file
- use any PO editor to update the translation
- upload the updated PO file

Implementation note: a generic mechanism to upload a page's source is
needed: it's only an alternative way to allow saving a the modified
page's source with the CGI.

### Short-term workflow

A possible workaround is:

- pretend to edit the PO file online
- copy the PO file content from the textarea
- cancel the edit
- paste the content into a local file.
- edit the local file in any PO editor
- pretend to edit the PO file online
- paste the modified local file's content into the edit textarea
- save
