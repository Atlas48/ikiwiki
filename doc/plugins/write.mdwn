ikiwiki [[plugins]] are written in perl. Each plugin is a perl module, in
the `IkiWiki::Plugin` namespace. The name of the plugin is typically in
lowercase, such as `IkiWiki::Plugin::inline`. Ikiwiki includes a
`IkiWiki::Plugin::skeleton` that can be fleshed out to make a useful
plugin. `IkiWiki::Plugin::pagecount` is another simple example.

# Note

One thing to keep in mind when writing a plugin is that ikiwiki is a wiki
*compiler*. So plugins influence pages when they are built, not when they
are loaded. A plugin that inserts the current time into a page, for
example, will insert the build time. Also, as a compiler, ikiwiki avoids
rebuilding pages unless they have changed, so a plugin that prints some
random or changing thing on a page will generate a static page that won't
change until ikiwiki rebuilds the page for some other reason, like the page
being edited.

# Registering plugins

Plugins should, when imported, call IkiWiki::hook to hook into ikiwiki's
processing. The function uses named parameters, and use varies depending on
the type of plugin being registered. Note that a plugin can call the
function more than once to register multiple hooks. All calls to
IkiWiki::hook should be passed a "type" parameter, which gives the type of
hook, a "id" paramter, which should be a unique string for this plugin, and
a "call" parameter, which is a reference to a function to call for the
hook.

# Writing a [[PreProcessorDirective]]

This is probably the most common use of a plugin.

        IkiWiki::hook(type => "preprocess", id => "foo", call => \&preprocess);

Replace "foo" with the command name that will be used inside brackers for
the preprocessor directive.

Each time the directive is processed, the referenced function (`preprocess`
in the example above) is called, and is passed named parameters. A "page"
parameter gives the name of the page that embedded the preprocessor
directive, while a "destpage" parameter gices the name of the page the
content is going to (different for inlined pages). All parameters included
in the directive are included as named parameters as well. Whatever the
function returns goes onto the page in place of the directive.

## Error handing

While a plugin can call ikiwiki's error routine for a fatal error, for
errors that aren't intended to halt the entire wiki build, including bad
parameters passed to a [[PreProcessorDirective]], etc, it's better to just
return the error message as the output of the plugin.

## Html issues

Note that if the [[htmlscrubber]] is enabled, html in
[[PreProcessorDirective]] output is sanitised, which may limit what your
plugin can do. Also, the rest of the page content is not in html format at
preprocessor time. Text output by a preprocessor directive will be passed
through markdown (or whatever engine is used to htmlize the page) along
with the rest of the page.

# Other types of hooks

Beyond PreProcessorDirectives, Other types of hooks that can be used by
plugins include:

## getopt

	IkiWiki::hook(type => "getopt", id => "foo", call => \&getopt);

This allows for plugins to perform their own processing of command-line
options and so add options to the ikiwiki command line. It's called during
command line processing, with @ARGV full of any options that ikiwiki was
not able to process on its own. The function should process any options it
can, removing them from @ARGV, and probably recording the configuration
settings in %IkiWiki::config. It should take care not to abort if it sees
an option it cannot process, and should just skip over those options and
leave them in @ARGV.

## checkconfig

	IkiWiki::hook(type => "checkconfig", id => "foo", call => \&checkconfig);

This is useful if the plugin needs to check for or modify ikiwiki's
configuration. It's called early in the startup process. The
function is passed no values. It's ok for the function to call
IkiWiki::error if something isn't configured right.

## filter

	IkiWiki::hook(type => "filter", id => "foo", call => \&filter);

Runs on the raw source of a page, before anything else touches it, and can
make arbitrary changes. The function is passed named parameters `page` and
`content` and should return the filtered content.

## htmlize

	IkiWiki::hook(type => "htmlize", id => "ext", call => \&htmlize);

Runs on the raw source of a page and turns it into html. The id parameter
specifies the filename extension that a file must have to be htmlized using
this plugin. This is how you can add support for new and exciting markup
languages to ikiwiki.

## pagetemplate

	IkiWiki::hook(type => "pagetemplate", id => "foo", call => \&pagetemplate);

Each time a page (or part of a blog page, or an rss feed) is rendered, a
[[template|templates]] is filled out. This hook allows modifying that
template. The function is passed named parameters. The "page" and
"destpage" parameters are the same as for a preprocess hook. The "template"
parameter is a `HTML::Template` object that is the template that will be
used to generate the page. The function can manipulate that template
object.

The most common thing to do is probably to call $template->param() to add
a new custom parameter to the template. Note that in order to be robust,
it's a good idea to check whether the template has a variable before trying
to set it, as setting a variable that's not present is an error.

	if ($template->query(name => 'foo')) {
		$template->param("foo" => "bar");
	}

## sanitize

	IkiWiki::hook(type => "sanitize", id => "foo", call => \&sanitize);

Use this to implement html sanitization or anything else that needs to
modify the content of a page after it has been fully converted to html.
The function is passed the page content and should return the sanitized
content.

## delete

	IkiWiki::hook(type => "delete", id => "foo", call => \&delete);

Each time a page or pages is removed from the wiki, the referenced function
is called, and passed the names of the source files that were removed.

## change

	IkiWiki::hook(type => "change", id => "foo", call => \&render);

Each time ikiwiki renders a change or addition (but not deletion) to the
wiki, the referenced function is called, and passed the names of the
source files that were rendered.

## cgi

	IkiWiki::hook(type => "cgi", id => "foo", call => \&cgi);

Use this to hook into ikiwiki's cgi script. Each registered cgi hook is
called in turn, and passed a CGI object. The hook should examine the
parameters, and if it will handle this CGI request, output a page and
terminate the program.

## savestate

	IkiWiki::hook(type => "savestate", id => "foo", call => \&savestate);

This hook is called wheneven ikiwiki normally saves its state, just before
the state is saved. The function can save other state, modify values before
they're saved, etc.

# Wiki configuration

A plugin can access the wiki's configuration via the `%IkiWiki::config`
hash. The best way to understand the contents of the hash is to look at
[[ikiwiki.setup]], which sets the hash content to configure the wiki.

# Wiki data

If your plugin needs to access data about other pages in the wiki. It can
use the following hashes, using a page name as the key:

* `%IkiWiki::links` lists the names of each page
  that a page links to, in an array reference.
* `%IkiWiki::pagemtime` contains the last modification time of each page
* `%IkiWiki::pagectime` contains the creation time of each page
* `%IkiWiki::renderedfiles` contains the name of the file rendered by a
  page
* `%IkiWiki::pagesources` contains the name of the source file for a page.
* `%IkiWiki::depends` contains a [[PageSpec]] that is used to specify other
  pages that a page depends on. If one of its dependencies is updated, the
  page will also get rebuilt. 
  
  Many plugins will need to add dependencies to this hash; the best way to do
  it is by using the IkiWiki::add_depends function, which takes as its
  parameters the page name and a [[PageSpec]] of dependencies to add.
* `%IkiWiki::forcerebuild` any pages set as the keys to this hash will be
  treated as if they're modified and rebuilt.

# A note on generating html links

Many plugins need to generate html links and add them to a page. This is
done by using the `IkiWiki::htmllink` function. The usual way to call
htmlllink is:

	htmllink($page, $page, $link)

Why is $page repeated? Because if a page is inlined inside another, and a
link is placed on it, the right way to make that link is actually:

	htmllink($page, $destpage, $link)

Here $destpage is the inlining page. A destpage parameter is passed to some
of the hook functions above; the ones that are not passed it are not used
during inlining and don't need to worry about this issue.

# RCS plugins

ikiwiki's support for revision control systems also uses pluggable perl
modules. These are in the `IkiWiki::RCS` namespace, for example
`IkiWiki::RCS::svn`. 

Each RCS plugin must support all the IkiWiki::rcs\_* functions.
See IkiWiki::RCS::Stub for the full list of functions. It's ok if
rcs\_getctime does nothing except for throwing an error.

See [[about_RCS_backends]] for some more info.
